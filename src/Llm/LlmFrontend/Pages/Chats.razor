@page "/chats"
@using LlmCommon
@using LlmCommon.Abstractions
@using LlmCommon.Dtos
@using LlmFrontend.Identity
@using LlmFrontend.Infrastructure
@inject NavigationManager Navigation
@inject IConfiguration config
@inject IJSRuntime js
@inject AppState state
@inject IEventBus bus
@inject IRequestHandler handler
@implements IEventHandler
@implements IDisposable

<PageTitle>Chats</PageTitle>


<ul class="list-group">
    @foreach (var chat in state.ChatsView.Chats)
    {
        <li class="list-group-item d-flex justify-content-between align-items-center">
            @chat.Name (owner: @chat.Owner.Name)
            <span class="badge badge-primary badge-pill">@chat.Messages.Count</span>
        </li>
    }
</ul>
@if (currentChat != null)
{
    <div class="form-group">
        <label>
            Message:
            <input @bind="messageInput" size="50" />
        </label>
    </div>
    <button @onclick="Send" disabled="@(!handler.IsConnected)">Send</button>

    @foreach (var item in state.ChatsView.Chats)
    {

    }
}

@code {
    private ChatDto? currentChat = null;

    private string messageInput = String.Empty;

    protected override void OnInitialized()
    {
        bus.Subscribe(this);
    }
    public void Dispose() { 
        bus?.UnSubscribe(this);
    }

    private async Task Send()
    {
        if (currentChat != null)
        {
            await handler.Handle(new LlmCommon.Commands.Chat.AddMessageCommand(currentChat.Id, messageInput));
        }
    }

    public Task Handle(Event ev) {
        if (ev is AppState.AppStateChangedEvent) {
            StateHasChanged();
        }
        return Task.CompletedTask;
    }
}
