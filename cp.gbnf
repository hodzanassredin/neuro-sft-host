Module ::= "MODULE" ident ";" [ImportList] DeclSeq ["BEGIN" StatementSeq] ["CLOSE" StatementSeq] "END" ident "."

ImportList ::= "IMPORT" [ident ":="] ident {"," [ident ":="] ident} ";"

DeclSeq ::= { ("CONST" {ConstDecl ";"}) | ("TYPE" {TypeDecl ";"}) | ("VAR" {VarDecl ";"}) } {ProcDecl ";" | ForwardDecl ";"}

ConstDecl ::= IdentDef "=" ConstExpr

TypeDecl ::= IdentDef "=" Type

VarDecl ::= IdentList ":" Type

ProcDecl ::= "PROCEDURE" [Receiver] IdentDef [FormalPars] MethAttributes [";" DeclSeq ["BEGIN" StatementSeq] "END" ident]

MethAttributes ::= ["," "NEW"] ["," ("ABSTRACT" | "EMPTY" | "EXTENSIBLE")]

ForwardDecl ::= "PROCEDURE" "^" [Receiver] IdentDef [FormalPars] MethAttributes

FormalPars ::= "(" [FPSection {";" FPSection}] ")" [":" Type]

FPSection ::= ["VAR" | "IN" | "OUT"] ident {"," ident} ":" Type

Receiver ::= "(" ["VAR" | "IN"] ident ":" ident ")"

Type ::= Qualident
       | "ARRAY" [ConstExpr {"," ConstExpr}] "OF" Type
       | ["ABSTRACT" | "EXTENSIBLE" | "LIMITED"] "RECORD" ["(" Qualident ")"] FieldList {";" FieldList} "END"
       | "POINTER" "TO" Type
       | "PROCEDURE" [FormalPars]

FieldList ::= [IdentList ":" Type]

StatementSeq ::= Statement {";" Statement}

Statement ::= [ Designator ":=" Expr
             | Designator ["(" [ExprList] ")"]
             | "IF" Expr "THEN" StatementSeq {"ELSIF" Expr "THEN" StatementSeq} ["ELSE" StatementSeq] "END"
             | "CASE" Expr "OF" Case {"|" Case} ["ELSE" StatementSeq] "END"
             | "WHILE" Expr "DO" StatementSeq "END"
             | "REPEAT" StatementSeq "UNTIL" Expr
             | "FOR" ident ":=" Expr "TO" Expr ["BY" ConstExpr] "DO" StatementSeq "END"
             | "LOOP" StatementSeq "END"
             | "WITH" [ Guard "DO" StatementSeq ] {"|" [ Guard "DO" StatementSeq ]} ["ELSE" StatementSeq] "END"
             | "EXIT"
             | "RETURN" [Expr]
             ]

Case ::= [CaseLabels {"," CaseLabels} ":" StatementSeq]

CaseLabels ::= ConstExpr [".." ConstExpr]

Guard ::= Qualident ":" Qualident

ConstExpr ::= Expr

Expr ::= SimpleExpr [Relation SimpleExpr]

SimpleExpr ::= ["+" | "-"] Term {AddOp Term}

Term ::= Factor {MulOp Factor}

Factor ::= Designator | number | character | string | "NIL" | Set | "(" Expr ")" | "~" Factor

Set ::= "{" [Element {"," Element}] "}"

Element ::= Expr [".." Expr]

Relation ::= "=" | "#" | "<" | "<=" | ">" | ">=" | "IN" | "IS"

AddOp ::= "+" | "-" | "OR"

MulOp ::= "*" | "/" | "DIV" | "MOD" | "&"

Designator ::= Qualident {"." ident | "[" ExprList "]" | "^" | "(" Qualident ")" | "(" [ExprList] ")"} ["$"]

ExprList ::= Expr {"," Expr}

IdentList ::= IdentDef {"," IdentDef}

Qualident ::= [ident "."] ident

IdentDef ::= ident ["*" | "-"]

ident ::= (letter | "_") {letter | "_" | digit}

letter ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | UnicodeLetter

digit ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

number ::= integer | real

integer ::= digit {digit} | digit {hexDigit} ("H" | "L")

real ::= digit {digit} "." {digit} [ScaleFactor]

ScaleFactor ::= "E" ["+" | "-"] digit {digit}

hexDigit ::= digit | "A" | "B" | "C" | "D" | "E" | "F"

character ::= digit {hexDigit} "X"

string ::= '"' {char} '"' | "'" {char} "'"

UnicodeLetter ::= char