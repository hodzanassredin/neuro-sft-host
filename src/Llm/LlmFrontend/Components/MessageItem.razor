@using LlmCommon.Dtos
@using LlmFrontend.Infrastructure
@using System.Globalization
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (Message!=null){

    var cl = isFromCurrent ? "sender" : "repaly";
    <li class="@cl">
        <p>@Message.Text</p>
        <span class="time">@ConvertDateTimeOffsetToLocalTimeString(Message.CreatedAt)</span>
    </li>
}

@code {

    public static string ConvertDateTimeOffsetToLocalTimeString(DateTimeOffset dateTimeOffset)
    {
        // Преобразуем DateTimeOffset в локальное время
        DateTime localTime = dateTimeOffset.ToLocalTime().DateTime;

        // Получаем текущую культуру
        CultureInfo currentCulture = CultureInfo.CurrentCulture;

        // Форматируем время в строку с использованием текущей культуры
        return localTime.ToString("HH:mm:ss", currentCulture);
    }


    private bool isFromCurrent;
    private User currentUser = User.Empty;
    protected override async Task OnInitializedAsync()
    {
        if (Message != null)
        {
            var res = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            currentUser = res.User.ToUser();
            isFromCurrent = Message != null && currentUser.Id == Message.User.Id;
        }
        await base.OnInitializedAsync();
    }
    protected override Task OnParametersSetAsync()
    {
        return base.OnParametersSetAsync();
    }
    [Parameter]
    public MessageDto Message { get; set; } = null!;
}
