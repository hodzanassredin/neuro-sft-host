secrets:
  db_password:
    file: db_password.txt
  postgres-password:
    file: postgres_password.txt

services:
  db:
    secrets:
      - postgres-password
    image: pgvector/pgvector:pg16 #postgis/postgis:latest
    hostname: db
    container_name: db
    ports:
        - "5433:5432"
    environment:
        POSTGRES_USER: postgresql
        POSTGRES_DB_PASSWORD_FILE: /run/secrets/postgres-password
    volumes:
        - ./initdb.sh:/docker-entrypoint-initdb.d/initdb.sh
        - ./data/postgresql:/var/lib/postgresql/data
    healthcheck:
        test: ["CMD-SHELL", "pg_isready -U postgresql"]
        interval: 10s
        timeout: 5s
        retries: 5
    logging:
      options:
        max-size: "10m"
        max-file: "3"

  # inference_server:
  #   image: nvcr.io/nvidia/tensorrtserver:19.05-py3
  #   runtime: nvidia
  #   volumes:
  #     - ./models:/models
  #   ports:
  #     - 8000:8000
  #     - 8002:8002
  #   command: ["trtserver", "--model-store=/models"]
  #   shm_size: 1g
  #   ulimits:
  #     memlock: -1
  #     stack: 67108864
  #   deploy:
  #     resources:
  #       reservations:
  #         memory: 16GB
  #         devices:
  #           - driver: nvidia
  #             count: 1
  #             capabilities: [gpu]

  frontend:
     depends_on:
       - backend
     image: ghcr.io/hodzanassredin/hltr_front:latest
     volumes:
       - ./cert:/cert
     restart: always
     ports:
       - '8086:80'
       - '8088:443'
     environment:
        - FrontendUrl=https://${DOMAIN}
        - BackendUrl=https://api.${DOMAIN}
     logging:
       options:
         max-size: "10m"
         max-file: "3"

  backend:
     secrets:
       - db_password
     depends_on:
       - db
     image: ghcr.io/hodzanassredin/hltr_back:latest
     volumes:
       - ./cert:/cert
       - ./data/backend:/data/fs:Z
     restart: always
     environment:
        - ConnectionStrings__AppDbContext=Host=db;Port=5432;Database=ident;Username=postgresql;Password=cjm;Trust Server Certificate=true
        - FrontendUrl=https://${DOMAIN}
        - BackendUrl=https://api.${DOMAIN}
        - Options__RootFsPath=/data/fs
     ports:
       - '7211:8080'
     logging:
       options:
         max-size: "10m"
         max-file: "3"

  vllm-server:
    volumes:
        - ./models:/models
    ports:
        - 9001:8000
    #ipc: host
    image: vllm/vllm-openai:latest
    command: --gpu-memory-utilization 0.5 --enable-lora --model Qwen/Qwen2.5-Coder-3B-Instruct --download_dir /vllmcache --dtype bfloat16 --trust-remote-code --quantization bitsandbytes --load-format bitsandbytes --lora-modules cp-lora=hodza/BlackBox-Coder-3B
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              device_ids: ['0']
              capabilities: [gpu]

  https-portal:
    image: steveltn/https-portal:1
    ports:
      - '80:80'
      - '443:443'
    links:
      - frontend
      - backend
    depends_on:
      - frontend
      - backend
    restart: always
    environment:
      STAGE: local
      DOMAINS: '${DOMAIN} -> http://frontend, api.${DOMAIN} -> http://backend:8080'
      CLIENT_MAX_BODY_SIZE: 500M
      WEBSOCKET: 'true'
      #STAGE: 'production'

  nginx:
    build:
      context: services/nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - backend
      - vllm-server

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./services/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      - backend
      - vllm-server
      - db
      - nginx

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

  telegraf:
    build:
      context: services/telegraf/
      dockerfile: Dockerfile
    ports:
      - "9273:9273"
    depends_on:
      - prometheus

  redis:
    image: redis:latest
    container_name: redis_container
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_USER=${REDIS_USER}
      - REDIS_USER_PASSWORD=${REDIS_USER_PASSWORD}
    ports:
      - "6380:6379"
    volumes:
      - ./redisdata:/data
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command: >
      sh -c '
        mkdir -p /usr/local/etc/redis &&
        echo "bind 0.0.0.0" > /usr/local/etc/redis/redis.conf &&
        echo "requirepass $REDIS_PASSWORD" >> /usr/local/etc/redis/redis.conf &&
        echo "appendonly yes" >> /usr/local/etc/redis/redis.conf &&
        echo "appendfsync everysec" >> /usr/local/etc/redis/redis.conf &&
        echo "user default on nopass ~* +@all" > /usr/local/etc/redis/users.acl &&
        echo "user $REDIS_USER on >$REDIS_USER_PASSWORD ~* +@all" >> /usr/local/etc/redis/users.acl &&
        redis-server /usr/local/etc/redis/redis.conf --aclfile /usr/local/etc/redis/users.acl
      '
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "$REDIS_PASSWORD", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true