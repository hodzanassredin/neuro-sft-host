ws ::= (" " | tab | lf)+
ws1 ::= " "
wsc ::= (comment | ws)*
cr  ::= [\r]
lf  ::= cr? [\n]
tab ::= [\t]

unicode ::= [^\x7F\x00-\x1F]

commentstart ::= "(*"
commentend ::= "*)"

comment ::=  commentstart  ( [^*] | ("*" [^)]) )*  commentend
eol      ::= "\n"
letter   ::= [A-Z] | [a-z]
digit    ::= [0-9]
hexDigit ::= digit | [A-F]

# | ("'" [^']* "'")
string ::= ("\"" [^"]* "\"")
character ::= digit hexDigit* "X"

number ::= integer | real

integer ::= digit+ | digit hexDigit? ("H" | "L")

real ::= digit digit* "." digit* [ScaleFactor]

ScaleFactor ::= "E" ("+" | "-")? digit digit*

ident ::= (letter | "_") (letter | "_" | digit)*

IdentDef ::= ident ("*" | "-")?

Qualident ::= (ident ".")? ident

IdentList ::= IdentDef ("," ws IdentDef)*

ExprList ::= Expr ("," ws? Expr)*

Designator ::= Qualident ("." ident | "[" ExprList "]" | "^" | "(" ws? Qualident ")" | "(" ws? (ExprList)? ")")* ("$")?

MulOp ::= "*" | "/" | "DIV" | "MOD" | "&"

AddOp ::= "+" | "-" | "OR"

Relation ::= "=" | "#" | "<" | "<=" | ">" | ">=" | "IN" | "IS"

Element ::= Expr (".." Expr)?

Set ::= "{" (Element ("," wsc Element)*)? "}"

Factor ::= Designator | number | character | string | "NIL" | Set | "(" Expr ")" | "~" Factor

Term ::= Factor (ws MulOp ws Factor)*

SimpleExpr ::= ("+" | "-")? Term (ws AddOp ws Term)*

Expr ::= SimpleExpr (ws? Relation ws? SimpleExpr)?

ConstExpr ::= Expr

Guard ::= Qualident ":" Qualident

CaseLabels ::= ConstExpr (".." ConstExpr)?

Case ::= (CaseLabels ("," CaseLabels)*)? ":" StatementSeq

Statement ::= ( Designator ws? ":=" ws? Expr
             | Designator ("(" (ExprList)? ")")?
             | "IF" ws Expr ws "THEN" StatementSeq ("ELSIF" ws Expr ws "THEN" StatementSeq)* ("ELSE" StatementSeq)? "END"
             | "CASE" ws Expr "OF" Case ("|" Case)* ("ELSE" StatementSeq)? "END"
             | "WHILE" ws Expr ws "DO" StatementSeq "END"
             | "REPEAT" ws StatementSeq "UNTIL" Expr
             | "FOR" ws ident ":=" Expr "TO" Expr ("BY" ConstExpr)? "DO" StatementSeq "END"
             | "LOOP" StatementSeq "END"
             | "WITH" ( Guard "DO" StatementSeq )? ("|" ( Guard "DO" StatementSeq ))* ("ELSE" StatementSeq)? "END"
             | "EXIT"
             | "RETURN" ws (Expr)?
             )

StatementSeq ::= wsc Statement wsc (";" wsc Statement  wsc )*

FieldList ::= (IdentList ws? ":" ws? Type)?

Type ::= Qualident | ("ARRAY" (ws ConstExpr ("," ConstExpr)*)? ws "OF" ws Type) | (("ABSTRACT" | "EXTENSIBLE" | "LIMITED") ws)? "RECORD" ws ("(" Qualident ")")? ws FieldList (";" wsc FieldList)* wsc "END" | "POINTER" ws "TO" ws Type | "PROCEDURE" (FormalPars)?

Receiver ::= "(" ("VAR" | "IN" ws)? ident ws? ":" ws? ident ")"

FPSection ::= (("VAR" | "IN" | "OUT" ) ws)? ident ("," ws? ident)* ws? ":" ws? Type

FormalPars ::= "(" (FPSection (";" ws FPSection)*)? ")" (":" ws? Type)?

MethAttributes ::= ("," "NEW")? ("," ("ABSTRACT" | "EMPTY" | "EXTENSIBLE"))?

ForwardDecl ::= "PROCEDURE" "^" (Receiver)? IdentDef (FormalPars)? MethAttributes

ProcDecl ::= "PROCEDURE" (ws Receiver)? ws IdentDef ws? (FormalPars)? MethAttributes (";" wsc DeclSeq ("BEGIN" StatementSeq)? "END" ws ident)?

VarDecl ::= IdentList ws? ":" ws? Type

TypeDecl ::= IdentDef ws? "=" ws? Type

ConstDecl ::= IdentDef ws? "=" ws? ConstExpr

DeclSeq ::= ( ("CONST" wsc (ConstDecl ";" wsc )*) | ("TYPE" wsc (TypeDecl ";" wsc)*) | ("VAR" wsc (VarDecl ";" wsc)*) )* (ProcDecl ";" wsc | ForwardDecl ";")*

ImportList ::= "IMPORT" wsc (ident ":=")? ident ("," ws (ident ":=")? ident)* ";" wsc

Module ::= "MODULE" ws ident ";" wsc (ImportList)? DeclSeq wsc ("BEGIN" StatementSeq)? ("CLOSE" StatementSeq)? "END" ws ident "."

Document ::= Module [^\x00]*

root ::= Document
