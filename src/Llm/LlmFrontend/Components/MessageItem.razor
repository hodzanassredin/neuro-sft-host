@using LlmCommon
@using LlmCommon.Abstractions
@using LlmCommon.Dtos
@using LlmCommon.Implementations
@using LlmFrontend.Infrastructure
@using System.Globalization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IRequestHandler handler

@if (Message!=null){

    var cl = isFromCurrent ? "sender" : "repaly";
    <li class="@cl" @onclick="@OnClick">


        @if (IsSelected){
            <div class="input-group mb-3">
                <input type="text" class="form-control" placeholder="" aria-label="" aria-describedby="basic-addon1">
                <div class="input-group-append">
                    @if (Message.User.Id == AiManager.aiUser.Id)
                    {
                        <button class="btn btn-primary btn-sm" type="button"  @onclick="Regenerate"><i class="bi bi-bootstrap-reboot"></i></button>
                    }
                    <button class="btn btn-outline-danger  btn-sm" type="button" @onclick="Remove"><i class="bi bi-trash"></i></button>
                </div>
            </div>

        }
        else {
            <p>@Message.Text</p>
        }

        <span class="time">@ConvertDateTimeOffsetToLocalTimeString(Message.CreatedAt)</span>

    </li>
}

@code {

    public static string ConvertDateTimeOffsetToLocalTimeString(DateTimeOffset dateTimeOffset)
    {
        // Преобразуем DateTimeOffset в локальное время
        DateTime localTime = dateTimeOffset.ToLocalTime().DateTime;

        // Получаем текущую культуру
        CultureInfo currentCulture = CultureInfo.CurrentCulture;

        // Форматируем время в строку с использованием текущей культуры
        return localTime.ToString("HH:mm:ss", currentCulture);
    }


    private bool isFromCurrent;
    private User currentUser = User.Empty;
    protected override async Task OnInitializedAsync()
    {
        if (Message != null)
        {
            var res = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            currentUser = res.User.ToUser();
            isFromCurrent = Message != null && currentUser.Id == Message.User.Id;
        }
        await base.OnInitializedAsync();
    }
    protected override Task OnParametersSetAsync()
    {
        return base.OnParametersSetAsync();
    }
    private Task OnClick() {
        return OnSelect.InvokeAsync();
    }

    private Task Regenerate()
    {
        return handler.Handle(new LlmCommon.Commands.Chat.RegenerateMessageCommand(ChatId, Message.Id));
    }
    private Task Remove() {
        return handler.Handle(new LlmCommon.Commands.Chat.RemoveMessageCommand(ChatId, Message.Id));
    }
    [Parameter]
    public Ids.Id ChatId { get; set; } = null!;
    [Parameter]
    public MessageDto Message { get; set; } = null!;
    [Parameter]
    public bool IsSelected { get; set; } = false;
    [Parameter]
    public EventCallback<Ids.Id> OnSelect { get; set; }
}
