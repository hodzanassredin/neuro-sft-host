@page "/chats"
@using LlmCommon
@using LlmCommon.Abstractions
@using LlmCommon.Dtos
@using LlmFrontend.Identity
@using LlmFrontend.Infrastructure
@inject NavigationManager Navigation
@inject IConfiguration config
@inject IJSRuntime js
@inject AppState state
@inject IEventBus bus
@inject IRequestHandler handler
@implements IEventHandler
@implements IDisposable

<PageTitle>Chats</PageTitle>
<div class="row">
    <div class="col-6">
        <ul class="list-group">
            @foreach (var chat in state.ChatsView.Chats)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    @chat.Name (owner: @chat.Owner.Name)
                    <span class="badge badge-primary badge-pill">@chat.Messages.Count</span>
                </li>
            }
        </ul>
    </div>
    @if (currentChat != null)
    {
        <div class="col-6">
            <div class="form-group">
                <label>
                    Message:
                    <input @bind="messageInput" size="50" />
                </label>
            </div>
            <button @onclick="Send" disabled="@(!handler.IsConnected)">Send</button>
    

            @foreach (var item in currentChat.Messages)
            {
                <div class="card w-75">
                    <div class="card-body">
                        <h5 class="card-title">Card title</h5>
                        <p class="card-text">With supporting text below as a natural lead-in to additional content.</p>
                        <a href="#" class="btn btn-primary">Button</a>
                    </div>
                </div>
            
            }
        </div>

    }
</div>
@code {
    private ChatDto? currentChat = null;

    private string messageInput = String.Empty;

    protected override void OnInitialized()
    {
        bus.Subscribe(this);
    }
    public void Dispose() { 
        bus?.UnSubscribe(this);
    }

    private async Task Send()
    {
        if (currentChat != null)
        {
            await handler.Handle(new LlmCommon.Commands.Chat.AddMessageCommand(currentChat.Id, messageInput));
        }
    }

    public Task Handle(Event ev) {
        if (ev is AppState.AppStateChangedEvent) {
            StateHasChanged();
        }
        return Task.CompletedTask;
    }
}
