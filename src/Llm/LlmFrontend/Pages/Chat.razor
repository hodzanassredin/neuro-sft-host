@page "/chat"
@using LlmFrontend.Identity
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@* @inject IAccessTokenProvider TokenProvider *@
@inject NavigationManager Navigation
@inject IConfiguration config
@implements IAsyncDisposable
@inject IJSRuntime js

<PageTitle>Chat</PageTitle>

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" bind-value:event="oninput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = [];
    private string? userInput;
    private string? messageInput;

    private async Task<System.Net.Cookie?> GetCookie(string key)
    {
        var raw = await js.InvokeAsync<string>("eval", "document.cookie");
        var all = raw.Split("; ");
        foreach (var item in all)
        {
            var parts = item.Split("=", 2);
            if (parts[0] == key) {
                return new System.Net.Cookie(parts[0], parts[1]);
            }
        }
        return null;
    }

    protected override async Task OnInitializedAsync()
    {
        var backendUrl = config["BackendUrl"] ?? "https://localhost:5001";

        var cookie = await GetCookie("AspNetCore.Identity.Application");
        hubConnection = new HubConnectionBuilder()
            .WithUrl(backendUrl + "/chathub",
                options => {
                    //    options.AccessTokenProvider = () => Task.FromResult(token?.Value); 

                    if (cookie!=null) options.Cookies.Add(cookie);
                    options.HttpMessageHandlerFactory = innerHandler => new CookieHandler { InnerHandler = innerHandler };
                })
            .Build();
        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();

    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
