@using LlmCommon
@using LlmCommon.Abstractions
@using LlmCommon.Transport
@using LlmFrontend.Identity
@using LlmFrontend.Infrastructure
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.SignalR.Client
@using System.Diagnostics
@inject HubConnection hubConnection
@inject IEventBus eventBus
@inject AppState state
@inject NavigationManager Navigation

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    @if (context.User.Identity?.IsAuthenticated != true)
                    {
                        <RedirectToLogin />
                    }
                    else
                    {
                        <p role="alert">You are not authorized to access this resource.</p>
                    }
                </NotAuthorized>
            </AuthorizeRouteView>
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    [Inject] IServiceProvider sp { get; set; }
    [Inject] IAccountManagement id { get; set; }


    protected override async Task OnInitializedAsync()
    {

        if (!await id.CheckAuthenticatedAsync())
        {
            Console.WriteLine("App not loading state unauth");
            Navigation.NavigateToLogin("authentication/login");
        }
        else
        {
            Console.WriteLine("App loading state and starting connection");
            await hubConnection.StartAsync();
            await state.LoadAsync();
            
        }
    }

    
}