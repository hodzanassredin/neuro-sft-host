@using LlmCommon
@using LlmCommon.Abstractions
@using LlmCommon.Dtos
@using LlmCommon.Implementations
@using LlmFrontend.Infrastructure
@using System.Globalization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IRequestHandler handler

@if (Message!=null){

    var cl = isFromCurrent ? "sender" : "repaly";
    <li class="@cl" @onclick="@OnClick">
        <p>@Message.Text &nbsp;
            @if (IsSelected)
            {
                    @if (Message.User.Id == AiManager.aiUser.Id)
                    {
                        <button class="btn btn-primary btn-sm" type="button" @onclick="Regenerate">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-bootstrap-reboot" viewBox="0 0 16 16">
                                <path d="M1.161 8a6.84 6.84 0 1 0 6.842-6.84.58.58 0 1 1 0-1.16 8 8 0 1 1-6.556 3.412l-.663-.577a.58.58 0 0 1 .227-.997l2.52-.69a.58.58 0 0 1 .728.633l-.332 2.592a.58.58 0 0 1-.956.364l-.643-.56A6.8 6.8 0 0 0 1.16 8z" />
                                <path d="M6.641 11.671V8.843h1.57l1.498 2.828h1.314L9.377 8.665c.897-.3 1.427-1.106 1.427-2.1 0-1.37-.943-2.246-2.456-2.246H5.5v7.352zm0-3.75V5.277h1.57c.881 0 1.416.499 1.416 1.32 0 .84-.504 1.324-1.386 1.324z" />
                            </svg>
                        </button>
                    }
                    <button class="btn btn-danger  btn-sm" type="button" @onclick="Remove">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                            <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z" />
                            <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z" />
                        </svg>
                    </button>
            }
        
        </p>
        <span class="time">@ConvertDateTimeOffsetToLocalTimeString(Message.CreatedAt)</span>

       
    </li>

}

@code {

    public static string ConvertDateTimeOffsetToLocalTimeString(DateTimeOffset dateTimeOffset)
    {
        // Преобразуем DateTimeOffset в локальное время
        DateTime localTime = dateTimeOffset.ToLocalTime().DateTime;

        // Получаем текущую культуру
        CultureInfo currentCulture = CultureInfo.CurrentCulture;

        // Форматируем время в строку с использованием текущей культуры
        return localTime.ToString("HH:mm:ss", currentCulture);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }
    private bool isFromCurrent;
    private User currentUser = User.Empty;
    protected override async Task OnInitializedAsync()
    {
        if (Message != null)
        {
            var res = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            currentUser = res.User.ToUser();
            isFromCurrent = Message != null && currentUser.Id == Message.User.Id;
        }
        await base.OnInitializedAsync();
    }
    protected override Task OnParametersSetAsync()
    {
        return base.OnParametersSetAsync();
    }
    private Task OnClick() {
        return OnSelect.InvokeAsync(Message.Id);
    }

    private Task Regenerate()
    {
        return handler.Handle(new LlmCommon.Commands.Chat.RegenerateMessageCommand(ChatId, Message.Id));
    }
    private Task Remove() {
        return handler.Handle(new LlmCommon.Commands.Chat.RemoveMessageCommand(ChatId, Message.Id));
    }
    [Parameter]
    public Ids.Id ChatId { get; set; } = null!;
    [Parameter]
    public MessageDto Message { get; set; } = null!;
    [Parameter]
    public bool IsSelected { get; set; } = false;
    [Parameter]
    public EventCallback<Ids.Id> OnSelect { get; set; }

}
