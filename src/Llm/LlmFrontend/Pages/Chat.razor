@page "/chat"
@page "/chat/{CurrentChatId}"
@using LlmCommon
@using LlmCommon.Abstractions
@using LlmCommon.Dtos
@using LlmFrontend.Components
@using LlmFrontend.Identity
@using LlmFrontend.Infrastructure
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject NavigationManager Navigation
@inject IConfiguration config
@inject IJSRuntime js
@inject AppState state
@inject IEventBus bus
@implements IEventHandler
@implements IDisposable
@inject IRequestHandler handler
@inject IJSRuntime js
@implements IAsyncDisposable
@inject NavigationManager Navigation

<PageTitle>Chat</PageTitle>

<section class="message-area">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <div class="chat-area">
                    <!-- chatlist -->
                    <div class="chatlist">
                        <div class="modal-dialog-scrollable">
                            <div class="modal-content">
                                <div class="chat-header">
                                    <div class="msg-search">
                                        <input @bind="search" type="text" class="form-control" id="inlineFormInputGroup" placeholder="Search" aria-label="search">
                                        <a class="add" @onclick:preventDefault="true"
                                        @onclick:stopPropagation="true" @onclick="AddChat" href="#"><img class="img-fluid" src="add.svg" alt="add"></a>
                                    </div>

                                    <ul class="nav nav-tabs" id="myTab" role="tablist">
                                        <li class="nav-item" role="presentation">
                                            <button class="nav-link active" id="Open-tab" data-bs-toggle="tab" data-bs-target="#Open" type="button" role="tab" aria-controls="Open" aria-selected="true">Open</button>
                                        </li>
                                        <li class="nav-item" role="presentation">
                                            <button class="nav-link" id="Closed-tab" data-bs-toggle="tab" data-bs-target="#Closed" type="button" role="tab" aria-controls="Closed" aria-selected="false">Closed</button>
                                        </li>
                                    </ul>
                                </div>

                                <div class="modal-body">
                                    <!-- chat-list -->
                                    <div class="chat-lists">
                                        <div class="tab-content" id="myTabContent">
                                            <div class="tab-pane fade show active" id="Open" role="tabpanel" aria-labelledby="Open-tab">
                                                <!-- chat-list -->
                                                <div class="chat-list">
                                                    @foreach (var chat in GetChats(true))
                                                    {
                                                        var isActive = currentChat != null && currentChat.Id == chat.Id;
                                                        <ChatItem Chat="@chat" OnClick="ChatClicked" IsActive="@isActive"></ChatItem>
                                                    }
                                                </div>
                                                <!-- chat-list -->
                                            </div>
                                            <div class="tab-pane fade" id="Closed" role="tabpanel" aria-labelledby="Closed-tab">

                                                <!-- chat-list -->
                                                <div class="chat-list">
                                                    @foreach (var chat in GetChats(false))
                                                    {
                                                        <ChatItem Chat="@chat" OnClick="ChatClicked"></ChatItem>
                                                    }

                                                </div>
                                                <!-- chat-list -->
                                            </div>
                                        </div>

                                    </div>
                                    <!-- chat-list -->
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- chatlist -->
                    @if (currentChat!=null){
                        <!-- chatbox -->
                        <div class="chatbox">
                            <div class="modal-dialog-scrollable">
                                <div class="modal-content">
                                    <div class="msg-head">
                                        <div class="row">
                                            <div class="col-8">
                                                <div class="d-flex align-items-center">
                                                    <span class="chat-icon"><img class="img-fluid" src="icons_biking-solid.svg" alt="image title"></span>
                                                    <div class="flex-shrink-0">
                                                        <img class="img-fluid" src="user.png" alt="user img">
                                                    </div>
                                                    <div class="flex-grow-1 ms-3">
                                                        <h3>@currentChat?.Name</h3>
                                                        <p>@currentChat?.Owner?.Name</p>
                                                        <p>
                                                            <button class="btn btn-primary" type="button" onclick="@ToggleSettings">
                                                                Model settings
                                                            </button>
                                                            @if (showSettings)
                                                            {
                                                                <div>
                                                                    <AiPanel Settings="@currentChat.AiSettings" OnSave="AiSettingsSave"></AiPanel>
                                                                </div>
                                                            }
                                                        </p>



                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-4">
                                                <ul class="moreoption">
                                                    <li class="navbar nav-item dropdown">
                                                        <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false"><i class="fa fa-ellipsis-v" aria-hidden="true"></i></a>
                                                        <ul class="dropdown-menu">
                                                            <li><a class="dropdown-item" href="#">Action</a></li>
                                                            <li><a class="dropdown-item" href="#">Another action</a></li>
                                                            <li>
                                                                <hr class="dropdown-divider">
                                                            </li>
                                                            <li><a class="dropdown-item" href="#">Something else here</a></li>
                                                        </ul>
                                                    </li>
                                                </ul>
                                            </div>
                                        </div>
                                    </div>


                                    <div @ref="messagesRef" class="modal-body">
                                        <div class="msg-body" >
                                            <ul>
                                                @if (currentChat != null && currentChat.Messages.Count > 0)
                                                {
                                                    var sorted = currentChat.Messages.OrderBy(x => x.CreatedAt);

                                                    var prevDt = DateTime.MinValue;
                                                    @foreach (var msg in sorted)
                                                    {
                                                        @if (prevDt != msg.CreatedAt.Date)
                                                        {
                                                            prevDt = msg.CreatedAt.Date;
                                                            <li>
                                                                <div class="divider">
                                                                    @if (prevDt == DateTime.Now.Date){
                                                                        <h6>Today</h6>
                                                                    } else{
                                                                        <h6>@prevDt.ToLocalTime().ToShortDateString()</h6>
                                                                    }
                                                                </div>
                                                            </li>
                                                        }
                                                        bool isSelected = msg.Id == selectedMessageId;

                                                        <MessageItem ChatId="@currentChat.Id" Message="msg" IsSelected="@isSelected" OnSelect="@SelectMessage"></MessageItem>

                                                    }
                                                }


                                            </ul>
                                        </div>
                                    </div>


                                    <div class="send-box">
                                        <div>
                                            <input 
                                            @bind="messageInput" @onkeyup="MessageKeyDown" type="text" class="form-control" aria-label="message…" placeholder="Write message … you can @@mention an agent">

                                            <button disabled="@(!handler.IsConnected)" @onclick="Send" type="button"><i class="fa fa-paper-plane" aria-hidden="true"></i> Send</button>
                                        </div>

                                        <div class="send-btns">
                                            <div class="attach">
                                                @* <div class="button-wrapper">
                                                    <span class="label">
                                                        <img class="img-fluid" src="https://mehedihtml.com/chatbox/assets/img/upload.svg" alt="image title"> attached file 
                                                    </span><input type="file" name="upload" id="upload" class="upload-box" placeholder="Upload File" aria-label="Upload File">
                                                </div>

                                                <select class="form-control" id="exampleFormControlSelect1">
                                                    <option>Select template</option>
                                                    <option>Template 1</option>
                                                    <option>Template 2</option>
                                                </select> 

                                                <div class="add-apoint">
                                                    <a href="#" data-toggle="modal" data-target="#exampleModal4"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewbox="0 0 16 16" fill="none"><path d="M8 16C3.58862 16 0 12.4114 0 8C0 3.58862 3.58862 0 8 0C12.4114 0 16 3.58862 16 8C16 12.4114 12.4114 16 8 16ZM8 1C4.14001 1 1 4.14001 1 8C1 11.86 4.14001 15 8 15C11.86 15 15 11.86 15 8C15 4.14001 11.86 1 8 1Z" fill="#7D7D7D"/><path d="M11.5 8.5H4.5C4.224 8.5 4 8.276 4 8C4 7.724 4.224 7.5 4.5 7.5H11.5C11.776 7.5 12 7.724 12 8C12 8.276 11.776 8.5 11.5 8.5Z" fill="#7D7D7D"/><path d="M8 12C7.724 12 7.5 11.776 7.5 11.5V4.5C7.5 4.224 7.724 4 8 4C8.276 4 8.5 4.224 8.5 4.5V11.5C8.5 11.776 8.276 12 8 12Z" fill="#7D7D7D"/></svg> Appoinment</a>
                                                </div>*@
                                            </div>
                                        </div>

                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <!-- chatbox -->


            </div>
        </div>
    </div>
</section>

@code{
    [Parameter]
    public string? CurrentChatId { get; set; }

    private Ids.Id selectedMessageId = Ids.Empty;

    private void SelectMessage(Ids.Id id) {
        if (selectedMessageId == id)
        {
            selectedMessageId = Ids.Empty;
        }
        else { 
            selectedMessageId = id;
        }
        
        StateHasChanged();
    }
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (CurrentChatId != null)
        {
            currentChat = await state.GetChat(Ids.Parse(CurrentChatId));
            if (currentChat == null) { 
                Navigation.NavigateTo($"chat");
            }
        }
        else { 
            currentChat = null;
        }
    }


    private void ToggleSettings() { showSettings = !showSettings; }
    private bool showSettings = false;

    private ElementReference messagesRef;

    private string search = String.Empty;
    private string messageInput = String.Empty;

    private ChatDto? currentChat = null;
    private IJSObjectReference? module;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await js.InvokeAsync<IJSObjectReference>("import",
                "/js/Chat.js");
        }
        if (module != null && currentChat!=null)
        {
            await module.InvokeVoidAsync("scrollToEnd", messagesRef);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task AiSettingsSave(AiSettingsDto settings) { 
        await handler.Handle(new LlmCommon.Commands.Chat.ChangeChatCommand(currentChat.Id, null, settings));
        showSettings = false;
    }

    public IEnumerable<ChatDtoBase> GetChats(bool isJoined) {
        var res = state.ChatsView?.Chats ?? Enumerable.Empty<ChatDtoBase>();
        if (!String.IsNullOrWhiteSpace(search)) {
            res = res.Where(x => x.Name.Contains(search) || x.Owner.Name.Contains(search));
        }
        return res;
    }

    private async Task AddChat()
    {
        var chatName = "New Chat " + DateTime.Now.ToString();
        await handler.Handle(new LlmCommon.Commands.Chat.AddChatCommand(chatName));
    }
    private async Task Send()
    {
        if (currentChat != null)
        {
            await handler.Handle(new LlmCommon.Commands.Chat.AddMessageCommand(currentChat.Id, messageInput));
            messageInput = String.Empty;

        }
    }
    private Task MessageKeyDown(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            return Send();
        }
        return Task.CompletedTask;
    }

    public async Task ChatClicked(ChatDtoBase chat)
    {
        Navigation.NavigateTo($"chat/{chat.Id}");
    }

    protected override void OnInitialized()
    {
        bus.Subscribe(this);
    }
    public void Dispose()
    {
        bus?.UnSubscribe(this);
    }
    public Task<bool> Handle(Event ev)
    {
        var changed = false;
        if (ev is AppState.AppStateChangedEvent)
        {
            if (currentChat != null && !state.ChatsView.Chats.Any(x=>x.Id == currentChat.Id)) {
                //close chat if it is removed
                Navigation.NavigateTo($"chat");
                return Task.FromResult(true);
            }

            StateHasChanged();
            changed = true;
        }
        return Task.FromResult(changed);
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            try
            {
                await module.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
            }
        }
    }
}